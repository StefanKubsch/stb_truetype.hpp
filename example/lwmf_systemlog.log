lwmf logging
logging started at: Fri Sep 20 20:41:02 2019
------------------------------------------------------------------------------------------------------------------------------------------------------
** INFO ** lwmf_openglwindow.hpp: Create window...
** INFO ** lwmf_openglwindow.hpp: Create OpenGL context...
** INFO ** lwmf_openglwindow.hpp: Gather OpenGL system information...
** INFO ** lwmf_openglwindow.hpp: OpenGL version: 4.5
** INFO ** lwmf_openglwindow.hpp: OpenGL vendor: ATI Technologies Inc.
** INFO ** lwmf_openglwindow.hpp: OpenGL renderer: AMD Radeon HD 5800 Series
** INFO ** lwmf_openglwindow.hpp: Primary OpenGL shading language version: 4.40
** INFO ** lwmf_openglloader.hpp: Set vsync (-1)...
** INFO ** lwmf_openglloader.hpp: Load wgl extensions...
** INFO ** lwmf_simd.hpp: Checking for SSE 4.2 Extensions...
** INFO ** lwmf_rawinput.hpp: Register device 6...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create vertex buffer object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create vertex array object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create element buffer object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create and compile the vertex shader...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Loading shaderfile ./Shader/Default.vert
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create and compile the fragment shader...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Loading shaderfile ./Shader/Default.frag
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Link the vertex and fragment shader into a shader program...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Use shader program...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Specify the layout of the vertex data...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create projection matrix...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Since the shader program is now loaded into GPU, we can delete the shaders...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create vertex buffer object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create vertex array object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create element buffer object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create and compile the vertex shader...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Loading shaderfile ./Shader/Default.vert
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create and compile the fragment shader...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Loading shaderfile ./Shader/Default.frag
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Link the vertex and fragment shader into a shader program...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Use shader program...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Specify the layout of the vertex data...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create projection matrix...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Since the shader program is now loaded into GPU, we can delete the shaders...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create vertex buffer object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create vertex array object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create element buffer object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create and compile the vertex shader...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Loading shaderfile ./Shader/Default.vert
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create and compile the fragment shader...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Loading shaderfile ./Shader/Default.frag
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Link the vertex and fragment shader into a shader program...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Use shader program...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Specify the layout of the vertex data...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create projection matrix...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Since the shader program is now loaded into GPU, we can delete the shaders...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create vertex buffer object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create vertex array object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create element buffer object...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create and compile the vertex shader...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Loading shaderfile ./Shader/Default.vert
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create and compile the fragment shader...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Loading shaderfile ./Shader/Default.frag
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Link the vertex and fragment shader into a shader program...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Use shader program...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Specify the layout of the vertex data...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Create projection matrix...
** INFO ** lwmf_openglshader.hpp: (Shadername Default) - Since the shader program is now loaded into GPU, we can delete the shaders...
** INFO ** lwmf_rawinput.hpp: Unregister device 6...
** INFO ** lwmf_openglwindow.hpp: Delete OpenGL context...
------------------------------------------------------------------------------------------------------------------------------------------------------
logging ended at: Fri Sep 20 20:41:07 2019

